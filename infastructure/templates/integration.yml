AWSTemplateFormatVersion: 2010-09-09
Description: 'ALB + ASG'

Parameters:
  ProjectPrefix:
    Type: String
  ProjectName:
    Type: String

  # KeyName:
  #   Type: String
  #   Description: 'The key used to access the instance'
  AMIImage:
    Type: AWS::EC2::Image::Id
    Description: 'AMI image'
  VpcId:
    Type: String
    Description: 'VPC Id'
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'VPC Subnet Ids'
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'VPC Subnet Ids'

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  AppLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckPath: /index.html
      Port: 3000
      Protocol: HTTP

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: !Ref PublicSubnets

  AppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref AppLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppLoadBalancerTargetGroup

  # HTTPListener:
  #   Type: "AWS::ElasticLoadBalancingV2::Listener"
  #   Properties:
  #     Protocol: HTTP
  #     Port: 80
  #     LoadBalancerArn: !Ref AppLoadBalancer
  #     DefaultActions:
  #       - Type: "redirect"
  #         RedirectConfig:
  #          Protocol: "HTTPS"
  #          Port: 443

  # AppLoadBalancerListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     Protocol: HTTP
  #     Port: 443
  #     LoadBalancerArn: !Ref AppLoadBalancer
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref AppLoadBalancerTargetGroup

  S3Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-ec2-s3'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  ServerProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${ProjectPrefix}-profile-${ProjectName}-ec2'
      Roles:
        - !Ref S3Role

  EC2ConnectEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Select [0, !Ref PrivateSubnets]

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: EC2_ASG_Template
      LaunchTemplateData:
        ImageId: !Ref AMIImage
        InstanceType: t2.micro
        # KeyName: !Ref KeyName
        IamInstanceProfile:
          Name: !Ref ServerProfile
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo yum update -y
            sudo yum install -y ruby wget
            cd /home/ec2-user
            wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            sudo service codedeploy-agent start

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ProjectPrefix}-asg-${ProjectName}'
      LaunchTemplate:
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
        LaunchTemplateId: !Ref EC2LaunchTemplate
      MaxSize: 2
      MinSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier: !Ref PrivateSubnets
      TargetGroupARNs:
        - !Ref AppLoadBalancerTargetGroup

  ScheduledActionOn:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      MaxSize: '2'
      MinSize: '1'
      DesiredCapacity: '1'
      Recurrence: '0 9 * * *'

  ScheduledActionOff:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      MaxSize: '0'
      MinSize: '0'
      DesiredCapacity: '0'
      Recurrence: '0 17 * * *'
